// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
    
    const contactForm = document.querySelector('.contact-us__form');
    const nameInput = document.querySelector('.contact-us__form-input[placeholder="–ò–º—è"]');
    const phoneInput = document.querySelector('.contact-us__form-input[placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"]');
    const businessInput = document.querySelector('.contact-us__form-input[placeholder="–í–∏–¥ –±–∏–∑–Ω–µ—Å–∞"]');
    const taskTextarea = document.querySelector('.contact-us__form-textarea');
    const submitButton = document.querySelector('.contact-us__form-button');
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã:', {
        contactForm: !!contactForm,
        nameInput: !!nameInput,
        phoneInput: !!phoneInput,
        businessInput: !!businessInput,
        taskTextarea: !!taskTextarea,
        submitButton: !!submitButton
    });

    if (!contactForm) {
        console.error('‚ùå –§–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
    function validateField(field, minLength = 2) {
        const value = field.value.trim();
        const isValid = value.length >= minLength;
        
        if (isValid) {
            field.classList.remove('error');
            field.classList.add('valid');
        } else {
            field.classList.remove('valid');
            field.classList.add('error');
        }
        
        return isValid;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    function validatePhone(phoneField) {
        const phoneValue = phoneField.value.trim();
        const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
        const isValid = phoneRegex.test(phoneValue.replace(/[\s\-\(\)]/g, ''));
        
        if (isValid) {
            phoneField.classList.remove('error');
            phoneField.classList.add('valid');
        } else {
            phoneField.classList.remove('valid');
            phoneField.classList.add('error');
        }
        
        return isValid;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    function validateEmail(emailField) {
        const emailValue = emailField.value.trim();
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const isValid = emailRegex.test(emailValue);
        
        if (isValid) {
            emailField.classList.remove('error');
            emailField.classList.add('valid');
        } else {
            emailField.classList.remove('valid');
            emailField.classList.add('error');
        }
        
        return isValid;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    function formatPhoneNumber(phoneInput) {
        let value = phoneInput.value.replace(/\D/g, '');
        
        if (value.startsWith('8')) {
            value = '7' + value.slice(1);
        }
        
        if (value.startsWith('7')) {
            value = value.replace(/^7(\d{3})(\d{3})(\d{2})(\d{2})/, '+7 ($1) $2-$3-$4');
        }
        
        phoneInput.value = value;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if (nameInput) {
        nameInput.addEventListener('blur', () => validateField(nameInput));
        nameInput.addEventListener('input', () => {
            if (nameInput.classList.contains('error')) {
                validateField(nameInput);
            }
        });
    }

    if (phoneInput) {
        phoneInput.addEventListener('input', () => {
            formatPhoneNumber(phoneInput);
            if (phoneInput.classList.contains('error')) {
                validatePhone(phoneInput);
            }
        });
        phoneInput.addEventListener('blur', () => validatePhone(phoneInput));
    }

    if (businessInput) {
        businessInput.addEventListener('blur', () => validateField(businessInput));
        businessInput.addEventListener('input', () => {
            if (businessInput.classList.contains('error')) {
                validateField(businessInput);
            }
        });
    }

    if (taskTextarea) {
        taskTextarea.addEventListener('blur', () => validateField(taskTextarea, 10));
        taskTextarea.addEventListener('input', () => {
            if (taskTextarea.classList.contains('error')) {
                validateField(taskTextarea, 10);
            }
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    async function submitForm(formData) {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', formData);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º API
        // –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏:
        
        try {
            // –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            // const response = await fetch('/api/contact', {
            //     method: 'POST',
            //     headers: {
            //         'Content-Type': 'application/json',
            //     },
            //     body: JSON.stringify(formData)
            // });

            // –í–∞—Ä–∏–∞–Ω—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot
            // const telegramBotToken = 'YOUR_BOT_TOKEN';
            // const chatId = 'YOUR_CHAT_ID';
            // const message = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: ${formData.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}\n–ë–∏–∑–Ω–µ—Å: ${formData.business}\n–ó–∞–¥–∞—á–∞: ${formData.task}`;
            
            // const telegramResponse = await fetch(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
            //     method: 'POST',
            //     headers: {
            //         'Content-Type': 'application/json',
            //     },
            //     body: JSON.stringify({
            //         chat_id: chatId,
            //         text: message
            //     })
            // });

            // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            return { success: true, message: '–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
            return { success: false, message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã' };
        }
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function showNotification(message, type = 'success') {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `form-notification form-notification--${type}`;
        notification.textContent = message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-family: var(--font-regular);
            font-size: 14px;
            z-index: 10000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            ${type === 'success' ? 'background-color: #4CAF50;' : 'background-color: #f44336;'}
        `;
        
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.style.transform = 'translateX(400px)';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 5000);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    contactForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('üìã –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        const isNameValid = nameInput ? validateField(nameInput) : true;
        const isPhoneValid = phoneInput ? validatePhone(phoneInput) : true;
        const isBusinessValid = businessInput ? validateField(businessInput) : true;
        const isTaskValid = taskTextarea ? validateField(taskTextarea, 10) : true;
        
        const isFormValid = isNameValid && isPhoneValid && isBusinessValid && isTaskValid;
        
        if (!isFormValid) {
            console.warn('‚ö†Ô∏è –§–æ—Ä–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏');
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ', 'error');
            return;
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const originalButtonText = submitButton.textContent;
        submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
        submitButton.disabled = true;
        submitButton.classList.add('loading');
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = {
            name: nameInput ? nameInput.value.trim() : '',
            phone: phoneInput ? phoneInput.value.trim() : '',
            business: businessInput ? businessInput.value.trim() : '',
            task: taskTextarea ? taskTextarea.value.trim() : '',
            timestamp: new Date().toISOString()
        };
        
        try {
            const result = await submitForm(formData);
            
            if (result.success) {
                console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                showNotification(result.message, 'success');
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                contactForm.reset();
                
                // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                [nameInput, phoneInput, businessInput, taskTextarea].forEach(field => {
                    if (field) {
                        field.classList.remove('valid', 'error');
                    }
                });
                
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
                showNotification(result.message, 'error');
            }
            
        } catch (error) {
            console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
            showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', 'error');
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        submitButton.textContent = originalButtonText;
        submitButton.disabled = false;
        submitButton.classList.remove('loading');
    });

    console.log('‚úÖ –§–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Spline –∞–Ω–∏–º–∞—Ü–∏–µ–π
function handleSplineInteraction() {
    const splineViewer = document.querySelector('.contact-animation spline-viewer');
    const contactSection = document.querySelector('.contacts');
    
    if (!splineViewer || !contactSection) return;
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ —Ñ–æ—Ä–º—ã
    const contactForm = document.querySelector('.contact-us__form');
    
    if (contactForm) {
        contactForm.addEventListener('scroll', () => {
            splineViewer.style.pointerEvents = 'none';
            
            clearTimeout(window.splineTimeout);
            window.splineTimeout = setTimeout(() => {
                splineViewer.style.pointerEvents = 'auto';
            }, 500);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Spline –∞–Ω–∏–º–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', handleSplineInteraction); 